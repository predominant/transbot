#!/usr/bin/env python
######################################################################
#	Name: transbot
#	Author: John McLean
#	
#	This program connects to user-designated irc channels and translate
# between them.  ie. if one channel is in English and one in Spanish, anything 
#said in the English channel shows up in Spanish in the Spanish channel. 
#This works with multiple channels and multiple users.  Users must designate 
#the channel's language, either by placing channel:language pairs into the 
#dictionary below or messaging the channel designating the language 
#according to the format: ".<lang_abbreviation>" for example: ".en" or ".es"
######################################################################

import logging

import irclib, urllib2, re, sys, os

import simplejson

from optparse import OptionParser

irclib.DEBUG = True

#connection info and default values
network = 'irc.freenode.net'
port = 6667
channel_languages = {}

#configure logging
logging.basicConfig(filename="transbot.log", 
                    format="%(asctime)s: %(levelname)s: %(message)s",
                    level=logging.DEBUG)

# supported_languages
# 'de' , 'zh' , 'en' , 'es' , 'fr' , 'ru' , 'pt' , 'ga' , 'hi' , 'he' , 'it' , 
# 'ko' , 'la' , 'ro' , 'sr' , 'sl' , 'sv' , 'tr' , 'ar' , 'ja' 

# FORMAT OF TRANSBOT.CONF
#
# network: <network-name>
# channels: #<channel-name> <two char language identifier>, etc...
# port: <port #>



def save_channels(save_list):
	try:
		temp = open('~transbot.conf','w')
		keyword = 'channels:'
		toAdd = save_list.split(',')
		
		f = open("transbot.conf",'r')
		#with open("transbot.conf",'r') as f:
		for line in f:
			if keyword in line:
				for channel in toAdd:
					pair = channel.split(':')
					temp.write(line.rstrip())
					temp.write(", #"+pair[0]+" "+
						   pair[1]+"\n")
						
			else:
				temp.write(line)
		os.rename("~transbot.conf","transbot.conf")
		f.close()
	except Exception:
		print "Error opening file 'transbot.conf'"
		os._exit(2)
		#create_config()
		#save_channels(save_list)


def remove_channels(remove_list):
	try:
		temp = open('~transbot.conf','w')
		keyword = 'channels:'
		toRemove = remove_list.split(',')
		
		f = open("transbot.conf",'r')
		#with open("transbot.conf",'r') as f:
		first = True
		for line in f:
			if keyword in line:
				channels = line.split(':')[1]
				channels = channels.split(',')
				temp.write("channels: ")
				for channel in channels:
					channel=channel.strip()
					pair = channel.split()
					if pair[0][1:] in toRemove:
						pass
					elif first:
						temp.write(channel)
						first = False
					else:
						temp.write(", "+channel)
				temp.write('\n')
			else:
				temp.write(line)
		os.rename("~transbot.conf","transbot.conf")
		f.close()
	except Exception:
		print "Error opening file 'transbot.conf'"
		os._exit(2)	
							
							
nick = 'transbot0'
name = 'transbot Test'
quote_string_re = re.compile(r'(".*?")')
api = 'http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q='

#Handles the actual translation of the message
def translator(source_lang, target_lang, message, name, channel):
    url =  api + urllib2.quote(message) + '&langpair=' + source_lang + '%7C' + target_lang
    urlRetVal = urllib2.urlopen(url)
    json_obj = simplejson.load(urlRetVal)
    logging.debug(json_obj)
    
    #encode in utf-8
    line = json_obj['responseData'] ['translatedText']
    line = line.replace('\"', '')
    line = line.encode ( "utf-8 " )
    
    logging.info(line) 
    return line
    
    
#Generic echo handler (space added, then with no space), used to ouput initial info from server
def handleEcho ( connection, event ):
	logging.debug(" ".join(event.arguments()))
def handleNoSpace ( connection, event ):
	logging.debug(" ".join(event.arguments()))


#handle private notices
def handlePrivNotice ( connection, event ):
	if event.source():
		logging.debug(":: " + event.source() + " ->" + event.arguments() [0])
	else:
		logging.dedug(event.arguments()[0])


#auto-joins to invited channels
def handleInvite ( connection, event ):
	channel_languages [ str ( event.arguments() [ 0 ]  ).lower() ] = '.en'
	connection.join ( event.arguments() [ 0 ] ) 


#handles private messages
def handlePrivMessage (  connection, event ):
	name = event.source().split ( '!' ) [ 0 ]
	helpmessage =  [ 'transbot 0.1', "This program connects to user" +
    " specified channels on irc.freenode.net and translates between" +
    " languages on those channels. Users must specify the language on the" +
    " channel before transbot will translate anything. Specification comes" +
    " in the form of messaging the channel with a message of the form" +
    " '.<language abbreviation>'. For example, english is '.en', spanish is" +
    " '.es'. ", 'Languages supported are: ar - Arabic, de - German, en -' +
    ' English, es - Spanish, fr - French, ga - Irish, hi - Hindi, he -' +
    ' Hebrew, it - Italian, ja - Japanese, ko - Korean, la - Latin, pt -' +
    ' Portugese, ro - Romanian, ru - Russian, sl - Slovenian, sr - Serbian,' +
    ' sv - Swedish, tr - Turkish, zh - Chinese' ]
	for line in range ( len ( helpmessage ) ):	
		server.privmsg ( name , helpmessage [ line ] )


#handles public messages
def handlePubMessage ( connection, event ):
    seeker = re.compile ( '^\.[a-zA-Z]{2}$' )
    source_lang = channel_languages [ str ( event.target() ).lower()  ] 
    message = event.arguments() [ 0 ]
    logging.info(message)
    name = event.source().split( '!' ) [ 0 ] 
    if name.strip ( '0123456789' ) == 'transbot':
        return
    # this seems to be a command to set the language of a channel    
    if bool ( seeker.search ( message ) ):
        message = message.strip ( '.' )
        channel_languages [ str ( event.target() ).lower()  ] = message; return
    for channel in channel_languages.keys():
        if channel_languages [ channel ] == source_lang:
            pass
        else:
            target_lang = channel_languages [ channel ]
            line = translator(source_lang, target_lang, message, name, channel)
            server.privmsg(channel, name +  "> " + line)


#handles topic changes
def handleTopic ( connection, event ):
    name = event.source().split ( "!" ) [ 0 ]
    source_lang = channel_languages [ str ( event.target() ).lower()  ] 
    message = event.arguments() [ 0 ]
    logging.info(message)    
    for channel in channel_languages.keys():
        if channel_languages[channel] == source_lang:
            pass
        else:
            target_lang = channel_languages[channel]
            translation = translator(source_lang, target_lang, "has set mode:" + message, name, channel)
            server.privmsg ( channel, name + " " + translation )


#handles mode changes
def handleMode ( connection, event ):
    name = event.source().split ( "!" ) [ 0 ]
    source_lang = channel_languages [ str ( event.target() ).lower()  ] 
    message = event.arguments() [ 0 ] 
    logging.info(message)
    for channel in channel_languages.keys():
        if channel_languages [ channel ] == source_lang:
            pass
        else:
            target_lang = channel_languages [ channel ]
            translation = translator(source_lang, target_lang, "has set mode:" + message, name, channel)
            if len ( event.arguments() ) < 2:
                server.privmsg ( channel, name + " " + translation)
            else:
                name2 = event.arguments() [ 1 ]
                server.privmsg ( channel, name + " " + translation.split( "has set " ) [ 0 ] + name2 + "'s" + translation.split( "has set" ) [ 1 ] )


#handles Parts
def handlePart ( connection, event ):
    name = event.source().split ( "!" ) [ 0 ]
    source_lang = channel_languages [ str ( event.target() ).lower()  ] 
    for channel in channel_languages.keys():
        if channel_languages[channel] == source_lang:
            pass
        else:
            target_lang = channel_languages[channel]
            translation = translator(source_lang, target_lang, "has quit", name, channel)
            logging.info(translation)
            server.privmsg ( channel, name + " " + translation + " " + str ( event.target() ).lower()  )


#handles quits
def handleQuit ( connection, event ):
    name = event.source().split ( "!" ) [ 0 ]
    for channel in channel_languages.keys():
        target_lang = channel_languages [ channel ]
        translation = translator("", target_lang, "has disconnected", name, channel)
        logging.info(translation)
        server.privmsg ( channel, name + " " + translation )

	
#handles kicks
def handleKick ( connection, event ):
    name = event.source().split ( "!" ) [ 0 ]
    name2 = event.arguments() [ 0 ]
    source_lang = channel_languages [ str ( event.target() ).lower()  ] 
    for channel in channel_languages.keys():
        if channel_languages[channel] == source_lang:
            pass
        else:
            target_lang = channel_languages[channel]
            translation = translator(source_lang, target_lang, "has been kicked by", name, channel)
            server.privmsg ( channel, name2 + " " + translation + " " + name)


#handle channel joins
def handleJoin ( connection, event ):
    #the source needs to be split into just the name
    #it comes in the format nickname!user@host
    name = event.source().split ( "!" ) [ 0 ] 
    if name.strip ( '0123456789' ) == "transbot":
        return
    source_lang = channel_languages [ str ( event.target() ).lower()  ] 
    for channel in channel_languages.keys():
        if channel_languages [ channel ] == source_lang:
            pass
        else:
            target_lang = channel_languages [ channel ]
            translation = translator(source_lang, target_lang, "has joined:", name, channel)
            logging.info(translation)
            server.privmsg ( channel, name + ' ' + translation + ' ' + str ( event.target() ).lower()  )

#handler for a pre-registed nick
def handleNoNick (connection, event):
    global nick, server
    instance = int ( nick.strip ( 'transbot' ) )
    instance += 1
    nick2 = 'transbot' + str ( instance )
    server = server_object ( network, nick2, name, port, ircname = name )
    return server
#create an irc object
irc = irclib.IRC()

# Register handlers
irc.add_global_handler ( 'part' , handlePart ) #handles parts
irc.add_global_handler ( 'quit' , handleQuit ) #handles quits
irc.add_global_handler ( 'kick' , handleKick ) #handles kicks
irc.add_global_handler ( 'mode' , handleMode ) #handles mode changes
irc.add_global_handler ( 'topic' , handleTopic ) #handles topic changes
irc.add_global_handler ( 'privmsg', handlePrivMessage ) #private messages
irc.add_global_handler ( 'pubmsg', handlePubMessage ) #public channel messages
irc.add_global_handler ( 'invite', handleInvite ) #invite
irc.add_global_handler ( 'privnotice', handlePrivNotice ) #Private notice
irc.add_global_handler ( 'welcome', handleEcho ) # Welcome message
irc.add_global_handler ( 'yourhost', handleEcho ) # Host message
irc.add_global_handler ( 'created', handleEcho ) # Server creation message
irc.add_global_handler ( 'myinfo', handleEcho ) # "My info" message
irc.add_global_handler ( 'featurelist', handleEcho ) # Server feature list
irc.add_global_handler ( 'luserclient', handleEcho ) # User count
irc.add_global_handler ( 'luserop', handleEcho ) # Operator count
irc.add_global_handler ( 'luserchannels', handleEcho ) # Channel count
irc.add_global_handler ( 'luserme', handleEcho ) # Server client count
irc.add_global_handler ( 'n_local', handleEcho ) # Server client count/maximum
irc.add_global_handler ( 'n_global', handleEcho ) # Network client count/maximum
irc.add_global_handler ( 'luserconns', handleEcho ) # Record client count
irc.add_global_handler ( 'luserunknown', handleEcho ) # Unknown connections
irc.add_global_handler ( 'motdstart', handleEcho ) # Message of the day ( start )
irc.add_global_handler ( 'motd', handleNoSpace ) # Message of the day
irc.add_global_handler ( 'edofmotd', handleEcho ) # Message of the day ( end )
irc.add_global_handler ( 'join', handleJoin ) # Channel join
irc.add_global_handler ( 'namreply', handleNoSpace ) # Channel name list
irc.add_global_handler ( 'endofnames', handleNoSpace ) # Channel name list ( end )
irc.add_global_handler ( 'nicknameinuse', handleNoNick ) #handles pre-registered nick

#create a server object, connect and join the channel
def server_object ( network, nick, name, port, ircname ):
	server = irc.server()
	server.connect ( network, port, nick, ircname )
	for channel in channel_languages.keys():
		server.join ( channel)
	return server


#hanndles command args
#handles help, save, remove

parser = OptionParser()
parser.add_option("-s","--save",help="Saves a list of channels as default."+  
		  "Uses form -s channel1:es,channel2:es...",dest="save")
parser.add_option("-r","--remove",help="Removes a list of channels as"+
		  "default. Uses form -r channel1:es,channel2:es...",dest="remove")

(options,args)=parser.parse_args()
	
if options.save is not None:
	save_channels(options.save)
if options.remove is not None:
	remove_channels(options.remove)
	
	for arg in args:
		arg = arg.split(':')
		channel_languages ['#'+arg[0].lower()] = arg[1]

try:
	conf_size = os.path.getsize ( 'transbot.conf' )
except:
	conf_size = 0
if conf_size is not 0:
	conf_file = open ( 'transbot.conf' )
    # grab the network name
	network = conf_file.readline().split ( ':' ) [ 1 ]
	network = network.strip ()
	channel_list = conf_file.readline().split ( ':' ) [ 1 ].lower()
	chans = channel_list.split ( ',' )
	for channel in chans:
		channel_languages [ channel.split() [ 0 ] ] = channel.split() [ 1 ]
	port = int ( conf_file.readline().split ( ':' ) [ 1 ] )
	conf_file.close()

#hanndles command args

for arg in args:
	arg = arg.split(':')
	channel_languages ['#'+arg[0].lower()] = arg[1]

server = server_object ( network, nick, name, port, ircname = name )

#jumps into infinite loop
irc.process_forever()
